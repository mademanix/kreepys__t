------- FILE kernel.asm LEVEL 1 PASS 2
      1  10000 ????
      2  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE kernel.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline 
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE kernel.asm
      5  10000 ????
      6  10000 ????
      7 U008b ????				      SEG.U	vars	; the label "vars" will appear in our symbol table's segment list
      8 U0080					      ORG	$80	; start of RAM
      9 U0080
     10 U0080
     11 U0080							;------------------------------------------------
     12 U0080							; Variables
     13 U0080							;------------------------------------------------
     14 U0080
     15 U0080		       00	   spriteYPosition ds	1	; 192 is at the top of the screen, the constant VALUE_OF_Y_AT_SCREEN_BOTTOM gives us the bottom.
     16 U0081		       00	   currentSpriteLine ds	1	; (0 &lt;= currentSpriteLine &lt; SPRITE_HEIGHT) for each frame
     17 U0082		       00	   hPosition  ds	1
     18 U0083		       00	   hPositionFrac ds	1
     19 U0084		       00	   playerBuffer ds	1
     20 U0085		       00	   spriteMoving ds	1	; Boolean. We use this to see if we stopped moving
     21 U0086		       00	   animFrameLineCtr ds	1
     22 U0087		       00	   faceDelay  ds	1
     23 U0088		       00	   spriteLineColor ds	1
     24 U0089		       00	   hPositionIndex ds	1
     25 U008a		       00	   faceDuration ds	1
     26 U008b
     27 U008b							;------------------------------------------------
     28 U008b							; Constants
     29 U008b							;------------------------------------------------
     30 U008b
     31 U008b							; Modify values to suit style
     32 U008b							;
     33 U008b		       00 04	   FACE_DURATION =	4	; Number of frames each face lasts on screen. Decrease to speed up, increase to slow down.
     34 U008b		       00 1e	   SLO_MO_FACE_DURATION =	30	; Same as above, applicable when "slo-mo" is activated (i.e. player holds fire button).
     35 U008b		       00 08	   SPRITE_HEIGHT =	8	; Native number of pixels tall the sprite is (before being stretched by a 2LK or whatever).
     36 U008b		       00 0a	   NUM_ANIMATION_FACES =	10	; Number of faces of animation. (!)Corresponds with number of color tables(!)
     37 U008b		       00 01	   MIRROR     =	1	; If true, sprite mirrors when moved left.
     38 U008b		       00 04	   X_LK       =	4	; set to 1 for 1LK, 2 for 2LK, etc.
     39 U008b		       00 02	   SPRITE_WIDTH =	2	; set to 1, 2, or 4, anything else is right out
     40 U008b		       00 15	   BG_COLOR   =	$15	; background color
     41 U008b		       00 90	   VALUE_OF_Y_AT_SCREEN_BOTTOM =	192-192/X_LK
     42 U008b		       00 a8	   VERTICAL_CENTER_OF_SCREEN =	192-(192-VALUE_OF_Y_AT_SCREEN_BOTTOM)/2
     43 U008b
     44 U008b							;------------------------------------------------
     45 U008b							; Macros (hey, my first macros!)
     46 U008b							;------------------------------------------------
     47 U008b
     48 U008b					      MAC	kernal
     49 U008b					      REPEAT	X_LK
     50 U008b					      sta	WSYNC
     51 U008b					      REPEND
     52 U008b					      ENDM
     53 U008b
     54 U008b					      MAC	up_dist_macro
     55 U008b					      inc	spriteYPosition
     56 U008b
     57 U008b					      IF	X_LK = 1
     58 U008b					      inc	spriteYPosition	; we move a little extra to speed up vertical motion in 1LK
     59 U008b					      ENDIF
     60 U008b					      ENDM
     61 U008b
     62 U008b					      MAC	down_dist_macro
     63 U008b					      dec	spriteYPosition
     64 U008b
     65 U008b					      IF	X_LK = 1
     66 U008b					      dec	spriteYPosition	; we move a little extra to speed up vertical motion in 1LK
     67 U008b					      ENDIF
     68 U008b					      ENDM
     69 U008b
     70 U008b							;------------------------------------------------
     71 U008b							; Start of ROM binary
     72 U008b							;------------------------------------------------
     73 U008b
     74  10000 ????				       SEG		; end of uninitialised segment
     75  f000					      ORG	$F000
     76  f000
     77  f000				   Reset
     78  f000
     79  f000							;------------------------------------------------
     80  f000							; Clear RAM and all TIA registers
     81  f000							;------------------------------------------------
     82  f000
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     84  f00b
     85  f00b							;------------------------------------------------
     86  f00b							; Inits
     87  f00b							;------------------------------------------------
     88  f00b
     89  f00b		       a9 15		      lda	#BG_COLOR
     90  f00d		       85 09		      sta	COLUBK
     91  f00f
     92  f00f		       a9 50		      lda	#80
     93  f011		       85 89		      sta	hPositionIndex	; initial x pos
     94  f013
     95  f013		       a9 a8		      lda	#VERTICAL_CENTER_OF_SCREEN
     96  f015		       85 80		      sta	spriteYPosition	; initial y pos
     97  f017
     98  f017		       a9 3c		      lda	#$3C
     99  f019		       85 06		      sta	COLUP0
    100  f01b
    101  f01b		       a9 0e		      lda	#$0E
    102  f01d		       85 08		      sta	COLUPF
    103  f01f
    104  f01f		       a9 04		      lda	#FACE_DURATION
    105  f021		       85 8a		      sta	faceDuration
    106  f023		       85 87		      sta	faceDelay
    107  f025
    108  f025		       a9 02		      lda	#SPRITE_WIDTH
    109  f027		       c9 01		      cmp	#1
    110  f029		       d0 05		      bne	NOT_SINGLE
    111  f02b		       a9 00		      lda	#0	; set to single
    112  f02d		       4c 3b f0 	      jmp	SET_SIZE
    113  f030				   NOT_SINGLE
    114  f030		       c9 02		      cmp	#2
    115  f032		       d0 05		      bne	NOT_DOUBLE
    116  f034		       a9 05		      lda	#5	; set to double
    117  f036		       4c 3b f0 	      jmp	SET_SIZE
    118  f039				   NOT_DOUBLE
    119  f039		       a9 07		      lda	#7	; set to quad
    120  f03b				   SET_SIZE
    121  f03b		       85 04		      sta	NUSIZ0
    122  f03d
    123  f03d							;------------------------------------------------
    124  f03d							; Start Frame
    125  f03d							;------------------------------------------------
    126  f03d
    127  f03d				   StartOfFrame
    128  f03d
    129  f03d							;------------------------------------------------
    130  f03d							; Vertical Sync (3 scanlines)
    131  f03d							;------------------------------------------------
    132  f03d
    133  f03d		       a9 02		      lda	#2
    134  f03f		       85 00		      sta	VSYNC	; turn on VSYNC (VSYNC=2 (%00000010))
    135  f041
    136  f041		       85 02		      sta	WSYNC	;\n		sta WSYNC		; &gt; 3 scanlines of VSYNC signal
    137  f043		       85 02		      sta	WSYNC	;/
    138  f045
    139  f045		       a9 00		      lda	#0
    140  f047		       85 00		      sta	VSYNC	; turn off VSYNC by clearing it  
    141  f049
    142  f049							;------------------------------------------------
    143  f049							; Vertical Blank (37 scanlines)
    144  f049							;------------------------------------------------
    145  f049
    146  f049		       a9 00		      lda	#0
    147  f04b		       85 01		      sta	VBLANK
    148  f04d
    149  f04d		       a9 2c		      lda	#44	;[2] VBLANK for 37 lines
    150  f04f		       8d 96 02 	      sta	TIM64T	;[3] 44*64 intervals == 2816 cycles == 37.05 scanlines
    151  f052
    152  f052							;--Position sprite horizontally using hPosition
    153  f052							;
    154  f052		       a6 89		      ldx	hPositionIndex	;3	|
    155  f054		       bd a0 fe 	      lda	hPositionTable,x	;4	|
    156  f057		       85 82		      sta	hPosition	;3	| hPosition = hPositionTable[hPositionIndex]
    157  f059		       29 0f		      and	#$0F	;2	|
    158  f05b		       aa		      tax		;2	| x = (hPosition & $0F) (coarse position)
    159  f05c		       85 02		      sta	WSYNC	;3	|
    160  f05e				   Position
    161  f05e		       ca		      dex		;2	| Position Sprite Horizontally (coarse adj.)
    162  f05f		       d0 fd		      bne	Position	;2+	| 
    163  f061		       85 10		      sta	RESP0	;3	| 
    164  f063		       85 02		      sta	WSYNC	;3	| 
    165  f065							;	|
    166  f065		       a5 82		      lda	hPosition	;3	|
    167  f067		       29 f0		      and	#$F0	;2	| clear coarse nybble
    168  f069		       85 20		      sta	HMP0	;3	| Offset Sprite from Coarse position (fine adj.)
    169  f06b
    170  f06b
    171  f06b							;--See about animating SpriteMan's face
    172  f06b							;
    173  f06b		       a5 85		      lda	spriteMoving
    174  f06d		       d0 07		      bne	SpriteManMoving	;	if (spriteMoving != false) goto SpriteManMoving
    175  f06f
    176  f06f		       a9 07		      lda	#SPRITE_HEIGHT-1	;	// Sprite is idle
    177  f071		       85 86		      sta	animFrameLineCtr	;	animFrameLineCtr = SPRITE_HEIGHT - 1
    178  f073		       4c 83 f0 	      jmp	EndAnimationChecks	;	goto EndAnimationChecks
    179  f076
    180  f076				   SpriteManMoving
    181  f076		       a5 86		      lda	animFrameLineCtr	; Sprite is moving
    182  f078		       c9 50		      cmp	#SPRITE_HEIGHT*#NUM_ANIMATION_FACES
    183  f07a		       b0 03		      bcs	ResetFace	; if (animFrameLineCtr &gt;= height*numFaces) goto ResetFace
    184  f07c		       4c 83 f0 	      jmp	EndAnimationChecks	; else goto EndAnimationChecks
    185  f07f				   ResetFace
    186  f07f		       a9 4f		      lda	#SPRITE_HEIGHT*#NUM_ANIMATION_FACES-1
    187  f081		       85 86		      sta	animFrameLineCtr	; animFrameLineCtr = (SPRITE_HEIGHT * NUM_ANIMATION_FACES) - 1
    188  f083				   EndAnimationChecks
    189  f083
    190  f083
    191  f083							; Start our scanline count (gets decremented)
    192  f083		       a0 c0		      ldy	#192	;2
    193  f085
    194  f085
    195  f085				   VerticalBlank
    196  f085		       ad 84 02 	      lda	INTIM	;3
    197  f088		       d0 fb		      bne	VerticalBlank	;2+
    198  f08a		       85 02		      sta	WSYNC	;3 End of Line/Start HBLANK
    199  f08c
    200  f08c
    201  f08c							;------------------------------------------------
    202  f08c							; Picture (192 scanlines)
    203  f08c							;------------------------------------------------
    204  f08c		       85 2a		      sta	HMOVE	;3
    205  f08e
    206  f08e		       a9 e4		      lda	#228	;2
    207  f090		       8d 96 02 	      sta	TIM64T	;3 36*64 intervals == 14592 cycles == 192 scanlines
    208  f093
    209  f093				   Picture
    210  f093							; Load Player sprite and color. (10~)
    211  f093		       a5 84		      lda	playerBuffer	;2
    212  f095		       85 1b		      sta	GRP0	;3	GRP0 = playerBuffer
    213  f097		       a5 88		      lda	spriteLineColor	;2
    214  f099		       85 06		      sta	COLUP0	;3	COLUP0 = spriteLineColor
    215  f09b
    216  f09b							; Clear the playerBuffer. (5~)
    217  f09b		       a9 00		      lda	#0	;2
    218  f09d		       85 84		      sta	playerBuffer	;3	playerBuffer = 0
    219  f09f
    220  f09f							; See if this is the line where we start drawing the sprite. (Y:10~, N:6~)
    221  f09f		       c4 80		      cpy	spriteYPosition	;3
    222  f0a1		       d0 04		      bne	SkipActivatePlayer	;2+	if (y != spriteYPosition) goto SkipActivatePlayer
    223  f0a3		       a9 07		      lda	#SPRITE_HEIGHT-1	;2	else
    224  f0a5		       85 81		      sta	currentSpriteLine	;3	currentSpriteLine = SPRITE_HEIGHT-1
    225  f0a7				   SkipActivatePlayer
    226  f0a7
    227  f0a7							; See if we are drawing sprite data on this line. (Y:5~, N:6~)
    228  f0a7		       a5 81		      lda	currentSpriteLine	;3
    229  f0a9		       30 10		      bmi	EndPlayerDraw	;2+	if (currentSpriteLine &lt; 0) goto EndPlayerDraw
    230  f0ab
    231  f0ab							; Load sprite graphic and color buffers. (20~)
    232  f0ab		       a6 86		      ldx	animFrameLineCtr	;3
    233  f0ad		       bd 00 fe 	      lda	SpriteGraphicTable,x	;4
    234  f0b0		       85 84		      sta	playerBuffer	;3	playerBuffer = SpriteGraphicTable[animFrameLineCtr]
    235  f0b2		       bd 50 fe 	      lda	SpriteColorTable,x	;4
    236  f0b5		       85 88		      sta	spriteLineColor	;3	spriteLineColor = SpriteColorTable[animFrameLineCtr]
    237  f0b7
    238  f0b7							; Decrement our counters. (10~)
    239  f0b7		       c6 81		      dec	currentSpriteLine	;5 currentSpriteLine -= 1
    240  f0b9		       c6 86		      dec	animFrameLineCtr	;5
    241  f0bb				   EndPlayerDraw
    242  f0bb
    243  f0bb		       88		      dey
    244  f0bc
      0  f0bc					      KERNAL		; execute appropriate number of sta WSYNC's
      1  f0bc					      REPEAT	X_LK
      2  f0bc		       85 02		      sta	WSYNC
      1  f0bc					      REPEND
      2  f0be		       85 02		      sta	WSYNC
      1  f0be					      REPEND
      2  f0c0		       85 02		      sta	WSYNC
      1  f0c0					      REPEND
      2  f0c2		       85 02		      sta	WSYNC
      3  f0c4					      REPEND
    246  f0c4
    247  f0c4		       ad 84 02 	      lda	INTIM	;[2]
    248  f0c7		       d0 ca		      bne	Picture	;[2+]
    249  f0c9
    250  f0c9							; VBLANK
    251  f0c9		       a9 02		      lda	#%00000010	;2
    252  f0cb		       85 01		      sta	VBLANK	;3 end of screen - enter blanking
    253  f0cd
    254  f0cd							;------------------------------------------------
    255  f0cd							; Overscan (30 scanlines)
    256  f0cd							;------------------------------------------------
    257  f0cd
    258  f0cd		       a9 24		      lda	#36	;2
    259  f0cf		       8d 96 02 	      sta	TIM64T	;3 36*64 intervals == 2304 cycles == 30.3 scanlines
    260  f0d2
    261  f0d2							; Manage the frame delay between face animations.
    262  f0d2							;
    263  f0d2				   StartFaceStuff
    264  f0d2		       c6 87		      dec	faceDelay	;	faceDelay -= 1
    265  f0d4		       a5 87		      lda	faceDelay	;
    266  f0d6		       f0 0a		      beq	ResetFaceDelay	;	if (faceDelay == 0) then goto ResetFaceDelay
    267  f0d8		       a5 86		      lda	animFrameLineCtr	;	&lt;-else force another frame of the current face
    268  f0da		       18		      clc		;	by bringing the animFrameLineCtr where
    269  f0db		       69 08		      adc	#SPRITE_HEIGHT	;	it was at the start of this frame.
    270  f0dd		       85 86		      sta	animFrameLineCtr	;	(i.e. add SPRITE_HEIGHT to it)
    271  f0df		       4c e6 f0 	      jmp	EndFaceStuff
    272  f0e2				   ResetFaceDelay
    273  f0e2		       a5 8a		      lda	faceDuration
    274  f0e4		       85 87		      sta	faceDelay	;	faceDelay = faceDuration
    275  f0e6				   EndFaceStuff
    276  f0e6
    277  f0e6
    278  f0e6							; Prepare movement variables.
    279  f0e6							;
    280  f0e6		       a9 00		      lda	#0
    281  f0e8		       85 85		      sta	spriteMoving	; default to not moving
    282  f0ea
    283  f0ea		       a9 04		      lda	#4
    284  f0ec		       85 8a		      sta	faceDuration
    285  f0ee
    286  f0ee							;--See if the fire button was pressed--
    287  f0ee							;		
    288  f0ee		       a9 80		      lda	#%10000000	; read button input
    289  f0f0		       24 0c		      bit	INPT4
    290  f0f2		       d0 06		      bne	ButtonNotPressed	; skip if button not pressed
    291  f0f4		       e6 85		      inc	spriteMoving	; button pressed
    292  f0f6		       a5 1e		      lda	SLO_MO_FACE_DURATION
    293  f0f8		       85 8a		      sta	faceDuration	; activate to animate slowly w/button
    294  f0fa				   ButtonNotPressed
    295  f0fa
    296  f0fa
    297  f0fa							;--Check Joystick for Horizontal Motion--
    298  f0fa							;
    299  f0fa		       a9 80		      lda	#%10000000
    300  f0fc		       2c 80 02 	      bit	SWCHA
    301  f0ff		       f0 09		      beq	Right
    302  f101		       4a		      lsr
    303  f102		       2c 80 02 	      bit	SWCHA
    304  f105		       f0 0f		      beq	Left
    305  f107		       4c 33 f1 	      jmp	CheckV
    306  f10a
    307  f10a		       a6 89	   Right      ldx	hPositionIndex
    308  f10c		       e0 90		      cpx	#160-#SPRITE_WIDTH*#8	; take into account sprite width when at right edge
    309  f10e		       f0 21		      beq	MoveH
    310  f110
    311  f110		       e8		      inx		; increment the hPositionIndex
    312  f111		       e6 85		      inc	spriteMoving	; Sprite is not idle
    313  f113		       4c 26 f1 	      jmp	ReflectRight
    314  f116
    315  f116		       a6 89	   Left       ldx	hPositionIndex
    316  f118		       e0 00		      cpx	#0
    317  f11a		       f0 15		      beq	MoveH
    318  f11c
    319  f11c		       ca		      dex
    320  f11d		       e6 85		      inc	spriteMoving	; Sprite is not idle
    321  f11f		       a9 01		      lda	#MIRROR
    322  f121		       f0 0e		      beq	MoveH	; if (MIRROR == 0) goto MoveH
    323  f123		       4c 2d f1 	      jmp	ReflectLeft
    324  f126
    325  f126				   ReflectRight
    326  f126		       a9 00		      lda	#0
    327  f128		       85 0b		      sta	REFP0	; No Reflect P0
    328  f12a		       4c 31 f1 	      jmp	MoveH
    329  f12d
    330  f12d				   ReflectLeft
    331  f12d		       a9 08		      lda	#%0001000
    332  f12f		       85 0b		      sta	REFP0	; Reflect P0
    333  f131
    334  f131		       86 89	   MoveH      stx	hPositionIndex
    335  f133
    336  f133
    337  f133							;--Check Joystick for Vertical Motion--
    338  f133							;
    339  f133		       a9 20	   CheckV     lda	#%00100000
    340  f135		       2c 80 02 	      bit	SWCHA
    341  f138		       f0 09		      beq	Down
    342  f13a		       4a		      lsr
    343  f13b		       2c 80 02 	      bit	SWCHA
    344  f13e		       f0 10		      beq	Up
    345  f140		       4c 5a f1 	      jmp	Overscan
    346  f143
    347  f143		       a6 80	   Down       ldx	spriteYPosition
    348  f145		       e0 9a		      cpx	#VALUE_OF_Y_AT_SCREEN_BOTTOM+#SPRITE_HEIGHT+2
    349  f147		       f0 11		      beq	Overscan	; if we're at the bottom of the screen goto Overscan
      0  f149					      DOWN_DIST_MACRO		; else move down
      1  f149		       c6 80		      dec	spriteYPosition
      2  f14b
      3  f14b				  -	      IF	X_LK = 1
      4  f14b				  -	      dec	spriteYPosition
      5  f14b					      ENDIF
    351  f14b		       e6 85		      inc	spriteMoving	; Sprite is moving
    352  f14d		       4c 5a f1 	      jmp	Overscan
    353  f150
    354  f150		       a6 80	   Up	      ldx	spriteYPosition
    355  f152		       e0 c0		      cpx	#192
    356  f154		       f0 04		      beq	Overscan	; if we're at the top of the screen goto Overscan
      0  f156					      UP_DIST_MACRO
      1  f156		       e6 80		      inc	spriteYPosition
      2  f158
      3  f158				  -	      IF	X_LK = 1
      4  f158				  -	      inc	spriteYPosition
      5  f158					      ENDIF
    358  f158		       e6 85		      inc	spriteMoving	; Sprite is moving
    359  f15a
    360  f15a				   Overscan
    361  f15a		       ad 84 02 	      lda	INTIM	;2
    362  f15d		       d0 fb		      bne	Overscan	;2+
    363  f15f		       85 02		      sta	WSYNC	;3
    364  f161
    365  f161		       4c 3d f0 	      jmp	StartOfFrame
    366  f164
    367  f164							;------------------------------------------------------------------------------
    368  f164
    369  f164							;------------------------------------------------
    370  f164							; Graphics Data
    371  f164							;------------------------------------------------
    372  f164
    373  fe00					      org	$FE00
    374  fe00
    375  fe00							;################################################
    376  fe00							; Sprite Graphic Data
    377  fe00
    378  fe00				   SpriteGraphicTable
    379  fe00
    380  fe00							;---Graphics Data from PlayerPal 2600---
    381  fe00
    382  fe00				   Frame0
    383  fe00		       1c		      .byte.b	#%00011100	;$76
    384  fe01		       3e		      .byte.b	#%00111110	;$76
    385  fe02		       7e		      .byte.b	#%01111110	;$76
    386  fe03		       7e		      .byte.b	#%01111110	;$76
    387  fe04		       7e		      .byte.b	#%01111110	;$76
    388  fe05		       7c		      .byte.b	#%01111100	;$76
    389  fe06		       38		      .byte.b	#%00111000	;$76
    390  fe07		       00		      .byte.b	#%00000000	;$76
    391  fe08				   Frame1
    392  fe08		       1c		      .byte.b	#%00011100	;$76
    393  fe09		       3e		      .byte.b	#%00111110	;$76
    394  fe0a		       7e		      .byte.b	#%01111110	;$76
    395  fe0b		       7e		      .byte.b	#%01111110	;$76
    396  fe0c		       7e		      .byte.b	#%01111110	;$76
    397  fe0d		       7c		      .byte.b	#%01111100	;$76
    398  fe0e		       38		      .byte.b	#%00111000	;$76
    399  fe0f		       00		      .byte.b	#%00000000	;$76
    400  fe10				   Frame2
    401  fe10		       1c		      .byte.b	#%00011100	;$76
    402  fe11		       3e		      .byte.b	#%00111110	;$76
    403  fe12		       7e		      .byte.b	#%01111110	;$76
    404  fe13		       7e		      .byte.b	#%01111110	;$76
    405  fe14		       7e		      .byte.b	#%01111110	;$76
    406  fe15		       7c		      .byte.b	#%01111100	;$76
    407  fe16		       38		      .byte.b	#%00111000	;$76
    408  fe17		       00		      .byte.b	#%00000000	;$76
    409  fe18				   Frame3
    410  fe18		       1c		      .byte.b	#%00011100	;$76
    411  fe19		       3e		      .byte.b	#%00111110	;$76
    412  fe1a		       7e		      .byte.b	#%01111110	;$76
    413  fe1b		       7e		      .byte.b	#%01111110	;$76
    414  fe1c		       7e		      .byte.b	#%01111110	;$76
    415  fe1d		       7c		      .byte.b	#%01111100	;$76
    416  fe1e		       38		      .byte.b	#%00111000	;$76
    417  fe1f		       00		      .byte.b	#%00000000	;$76
    418  fe20				   Frame4
    419  fe20		       00		      .byte.b	#%00000000	;$76
    420  fe21		       1c		      .byte.b	#%00011100	;$76
    421  fe22		       3e		      .byte.b	#%00111110	;$76
    422  fe23		       7e		      .byte.b	#%01111110	;$76
    423  fe24		       7e		      .byte.b	#%01111110	;$76
    424  fe25		       7e		      .byte.b	#%01111110	;$76
    425  fe26		       7c		      .byte.b	#%01111100	;$76
    426  fe27		       38		      .byte.b	#%00111000	;$76
    427  fe28				   Frame5
    428  fe28		       00		      .byte.b	#%00000000	;$76
    429  fe29		       1c		      .byte.b	#%00011100	;$76
    430  fe2a		       3e		      .byte.b	#%00111110	;$76
    431  fe2b		       7e		      .byte.b	#%01111110	;$76
    432  fe2c		       7e		      .byte.b	#%01111110	;$76
    433  fe2d		       7e		      .byte.b	#%01111110	;$76
    434  fe2e		       7c		      .byte.b	#%01111100	;$76
    435  fe2f		       38		      .byte.b	#%00111000	;$76
    436  fe30				   Frame6
    437  fe30		       00		      .byte.b	#%00000000	;$76
    438  fe31		       1c		      .byte.b	#%00011100	;$76
    439  fe32		       3e		      .byte.b	#%00111110	;$76
    440  fe33		       7e		      .byte.b	#%01111110	;$76
    441  fe34		       7e		      .byte.b	#%01111110	;$76
    442  fe35		       7e		      .byte.b	#%01111110	;$76
    443  fe36		       7c		      .byte.b	#%01111100	;$76
    444  fe37		       38		      .byte.b	#%00111000	;$76
    445  fe38				   Frame7
    446  fe38		       00		      .byte.b	#%00000000	;$76
    447  fe39		       1c		      .byte.b	#%00011100	;$76
    448  fe3a		       3e		      .byte.b	#%00111110	;$76
    449  fe3b		       7e		      .byte.b	#%01111110	;$76
    450  fe3c		       7e		      .byte.b	#%01111110	;$76
    451  fe3d		       7e		      .byte.b	#%01111110	;$76
    452  fe3e		       7c		      .byte.b	#%01111100	;$76
    453  fe3f		       38		      .byte.b	#%00111000	;$76
    454  fe40				   Frame8
    455  fe40		       00		      .byte.b	#%00000000	;$76
    456  fe41		       1c		      .byte.b	#%00011100	;$76
    457  fe42		       3e		      .byte.b	#%00111110	;$76
    458  fe43		       7e		      .byte.b	#%01111110	;$76
    459  fe44		       7e		      .byte.b	#%01111110	;$76
    460  fe45		       7e		      .byte.b	#%01111110	;$76
    461  fe46		       7c		      .byte.b	#%01111100	;$76
    462  fe47		       38		      .byte.b	#%00111000	;$76
    463  fe48				   Frame9
    464  fe48		       1c		      .byte.b	#%00011100	;$76
    465  fe49		       3e		      .byte.b	#%00111110	;$76
    466  fe4a		       7e		      .byte.b	#%01111110	;$76
    467  fe4b		       7e		      .byte.b	#%01111110	;$76
    468  fe4c		       7e		      .byte.b	#%01111110	;$76
    469  fe4d		       7c		      .byte.b	#%01111100	;$76
    470  fe4e		       38		      .byte.b	#%00111000	;$76
    471  fe4f		       00		      .byte.b	#%00000000	;$76
    472  fe50							;---End Graphics Data---
    473  fe50
    474  fe50
    475  fe50							;################################################
    476  fe50							; Sprite Color Data
    477  fe50
    478  fe50				   SpriteColorTable
    479  fe50
    480  fe50							; Color for Face 0
    481  fe50							;---Color Data from PlayerPal 2600---
    482  fe50
    483  fe50				   ColorFrame0
    484  fe50		       76		      .byte.b	#$76	;
    485  fe51		       76		      .byte.b	#$76	;
    486  fe52		       76		      .byte.b	#$76	;
    487  fe53		       76		      .byte.b	#$76	;
    488  fe54		       76		      .byte.b	#$76	;
    489  fe55		       76		      .byte.b	#$76	;
    490  fe56		       76		      .byte.b	#$76	;
    491  fe57		       76		      .byte.b	#$76	;
    492  fe58				   ColorFrame1
    493  fe58		       76		      .byte.b	#$76	;
    494  fe59		       76		      .byte.b	#$76	;
    495  fe5a		       76		      .byte.b	#$76	;
    496  fe5b		       76		      .byte.b	#$76	;
    497  fe5c		       76		      .byte.b	#$76	;
    498  fe5d		       76		      .byte.b	#$76	;
    499  fe5e		       76		      .byte.b	#$76	;
    500  fe5f		       76		      .byte.b	#$76	;
    501  fe60				   ColorFrame2
    502  fe60		       76		      .byte.b	#$76	;
    503  fe61		       76		      .byte.b	#$76	;
    504  fe62		       76		      .byte.b	#$76	;
    505  fe63		       76		      .byte.b	#$76	;
    506  fe64		       76		      .byte.b	#$76	;
    507  fe65		       76		      .byte.b	#$76	;
    508  fe66		       76		      .byte.b	#$76	;
    509  fe67		       76		      .byte.b	#$76	;
    510  fe68				   ColorFrame3
    511  fe68		       76		      .byte.b	#$76	;
    512  fe69		       76		      .byte.b	#$76	;
    513  fe6a		       76		      .byte.b	#$76	;
    514  fe6b		       76		      .byte.b	#$76	;
    515  fe6c		       76		      .byte.b	#$76	;
    516  fe6d		       76		      .byte.b	#$76	;
    517  fe6e		       76		      .byte.b	#$76	;
    518  fe6f		       76		      .byte.b	#$76	;
    519  fe70				   ColorFrame4
    520  fe70		       76		      .byte.b	#$76	;
    521  fe71		       76		      .byte.b	#$76	;
    522  fe72		       76		      .byte.b	#$76	;
    523  fe73		       76		      .byte.b	#$76	;
    524  fe74		       76		      .byte.b	#$76	;
    525  fe75		       76		      .byte.b	#$76	;
    526  fe76		       76		      .byte.b	#$76	;
    527  fe77		       76		      .byte.b	#$76	;
    528  fe78				   ColorFrame5
    529  fe78		       76		      .byte.b	#$76	;
    530  fe79		       76		      .byte.b	#$76	;
    531  fe7a		       76		      .byte.b	#$76	;
    532  fe7b		       76		      .byte.b	#$76	;
    533  fe7c		       76		      .byte.b	#$76	;
    534  fe7d		       76		      .byte.b	#$76	;
    535  fe7e		       76		      .byte.b	#$76	;
    536  fe7f		       76		      .byte.b	#$76	;
    537  fe80				   ColorFrame6
    538  fe80		       76		      .byte.b	#$76	;
    539  fe81		       76		      .byte.b	#$76	;
    540  fe82		       76		      .byte.b	#$76	;
    541  fe83		       76		      .byte.b	#$76	;
    542  fe84		       76		      .byte.b	#$76	;
    543  fe85		       76		      .byte.b	#$76	;
    544  fe86		       76		      .byte.b	#$76	;
    545  fe87		       76		      .byte.b	#$76	;
    546  fe88				   ColorFrame7
    547  fe88		       76		      .byte.b	#$76	;
    548  fe89		       76		      .byte.b	#$76	;
    549  fe8a		       76		      .byte.b	#$76	;
    550  fe8b		       76		      .byte.b	#$76	;
    551  fe8c		       76		      .byte.b	#$76	;
    552  fe8d		       76		      .byte.b	#$76	;
    553  fe8e		       76		      .byte.b	#$76	;
    554  fe8f		       76		      .byte.b	#$76	;
    555  fe90				   ColorFrame8
    556  fe90		       76		      .byte.b	#$76	;
    557  fe91		       76		      .byte.b	#$76	;
    558  fe92		       76		      .byte.b	#$76	;
    559  fe93		       76		      .byte.b	#$76	;
    560  fe94		       76		      .byte.b	#$76	;
    561  fe95		       76		      .byte.b	#$76	;
    562  fe96		       76		      .byte.b	#$76	;
    563  fe97		       76		      .byte.b	#$76	;
    564  fe98				   ColorFrame9
    565  fe98		       76		      .byte.b	#$76	;
    566  fe99		       76		      .byte.b	#$76	;
    567  fe9a		       76		      .byte.b	#$76	;
    568  fe9b		       76		      .byte.b	#$76	;
    569  fe9c		       76		      .byte.b	#$76	;
    570  fe9d		       76		      .byte.b	#$76	;
    571  fe9e		       76		      .byte.b	#$76	;
    572  fe9f		       76		      .byte.b	#$76	;
    573  fea0							;---End Color Data---
    574  fea0
    575  fea0				   hPositionTable
    576  fea0		       34 24 14 04*	      .byte.b	$34,$24,$14,$04,$F4,$E4,$D4,$C4,$B4,$A4,$94	; 0-10
    577  feab		       75 65 55 45*	      .byte.b	$75,$65,$55,$45,$35,$25,$15,$05,$F5,$E5,$D5,$C5,$B5,$A5,$95	; 11-25
    578  feba		       76 66 56 46*	      .byte.b	$76,$66,$56,$46,$36,$26,$16,$06,$F6,$E6,$D6,$C6,$B6,$A6,$96	; 26-40
    579  fec9		       77 67 57 47*	      .byte.b	$77,$67,$57,$47,$37,$27,$17,$07,$F7,$E7,$D7,$C7,$B7,$A7,$97	; 41-55
    580  fed8		       78 68 58 48*	      .byte.b	$78,$68,$58,$48,$38,$28,$18,$08,$F8,$E8,$D8,$C8,$B8,$A8,$98	; 56-70
    581  fee7		       79 69 59 49*	      .byte.b	$79,$69,$59,$49,$39,$29,$19,$09,$F9,$E9,$D9,$C9,$B9,$A9,$99	; 71-85
    582  fef6		       7a 6a 5a 4a*	      .byte.b	$7A,$6A,$5A,$4A,$3A,$2A,$1A,$0A,$FA,$EA,$DA,$CA,$BA,$AA,$9A	; 86-100
    583  ff05		       7b 6b 5b 4b*	      .byte.b	$7B,$6B,$5B,$4B,$3B,$2B,$1B,$0B,$FB,$EB,$DB,$CB,$BB,$AB,$9B	; 101-115
    584  ff14		       7c 6c 5c 4c*	      .byte.b	$7C,$6C,$5C,$4C,$3C,$2C,$1C,$0C,$FC,$EC,$DC,$CC,$BC,$AC,$9C	; 116-130
    585  ff23		       7d 6d 5d 4d*	      .byte.b	$7D,$6D,$5D,$4D,$3D,$2D,$1D,$0D,$FD,$ED,$DD,$CD,$BD,$AD,$9D	; 131-145
    586  ff32		       7e 6e 5e 4e*	      .byte.b	$7E,$6E,$5E,$4E,$3E,$2E,$1E,$0E,$FE,$EE,$DE,$CE,$BE,$AE	; 146-159
    587  ff40
    588  ff40
    589  ff40							;----------------
    590  fffa					      org	$FFFA
    591  fffa
    592  fffa				   InterruptVectors
    593  fffa
    594  fffa		       00 f0		      .word.w	Reset	; NMI
    595  fffc		       00 f0		      .word.w	Reset	; RESET
    596  fffe		       00 f0		      .word.w	Reset	; IRQ
